cmake_minimum_required(VERSION 3.16)

project(ex00 VERSION 0.1 LANGUAGES CXX)

set(CMAKE_AUTOUIC ON)
set(CMAKE_AUTOMOC ON)
set(CMAKE_AUTORCC ON)

set(CMAKE_CXX_STANDARD 17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

find_package(QT NAMES Qt6 Qt5 REQUIRED COMPONENTS Widgets)
find_package(Qt${QT_VERSION_MAJOR} REQUIRED COMPONENTS Widgets)

add_subdirectory(external/googletest)

include_directories(external/googletest/googletest/include)

set(PROJECT_SOURCES
        src/Contact.cpp
        src/ContactList.cpp
        src/main.cpp
        src/mainwindow.cpp
)

set(PROJECT_HEADERS
        include/Contact.hpp
        include/ContactList.hpp
        include/mainwindow.hpp
)

set(PROJECT_UI
        ui/mainwindow.ui
)


if(${QT_VERSION_MAJOR} GREATER_EQUAL 6)
    qt_add_executable(ex00
        MANUAL_FINALIZATION
            ${PROJECT_SOURCES} ${PROJECT_HEADERS} ${PROJECT_UI}
    )
# Define target properties for Android with Qt 6 as:
#    set_property(TARGET ex00 APPEND PROPERTY QT_ANDROID_PACKAGE_SOURCE_DIR
#                 ${CMAKE_CURRENT_SOURCE_DIR}/android)
# For more information, see https://doc.qt.io/qt-6/qt-add-executable.html#target-creation
else()
    if(ANDROID)
        add_library(ex00 SHARED
            ${PROJECT_SOURCES} ${PROJECT_HEADERS} ${PROJECT_UI}
        )
# Define properties for Android with Qt 5 after find_package() calls as:
#    set(ANDROID_PACKAGE_SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/android")
    else()
        add_executable(ex00
            ${PROJECT_SOURCES} ${PROJECT_HEADERS} ${PROJECT_UI}
        )
    endif()
endif()

target_link_libraries(ex00 PRIVATE Qt${QT_VERSION_MAJOR}::Widgets)

# --- Add Google Test for Unit Testing ---
# Create an executable for running the tests
add_executable(run_tests
        tests/test_contact_class.cpp
        src/Contact.cpp
        include/Contact.hpp
)

# Link Google Test and Google Test main libraries to the test executable
target_link_libraries(run_tests gtest gtest_main)

# Enable testing with CTest (optional)
enable_testing()

# Add the test to CTest
add_test(NAME run_tests COMMAND run_tests)

# Qt for iOS sets MACOSX_BUNDLE_GUI_IDENTIFIER automatically since Qt 6.1.
# If you are developing for iOS or macOS you should consider setting an
# explicit, fixed bundle identifier manually though.
if(${QT_VERSION} VERSION_LESS 6.1.0)
  set(BUNDLE_ID_OPTION MACOSX_BUNDLE_GUI_IDENTIFIER com.example.ex00)
endif()
set_target_properties(ex00 PROPERTIES
    ${BUNDLE_ID_OPTION}
    MACOSX_BUNDLE_BUNDLE_VERSION ${PROJECT_VERSION}
    MACOSX_BUNDLE_SHORT_VERSION_STRING ${PROJECT_VERSION_MAJOR}.${PROJECT_VERSION_MINOR}
    MACOSX_BUNDLE TRUE
    WIN32_EXECUTABLE TRUE
)

include(GNUInstallDirs)
install(TARGETS ex00
    BUNDLE DESTINATION .
    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR}
    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR}
)

if(QT_VERSION_MAJOR EQUAL 6)
    qt_finalize_executable(ex00)
endif()
